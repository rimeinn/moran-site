import{_ as e,c as r,a2 as t,o}from"./chunks/framework.CJ3Fe3Yg.js";const m=JSON.parse('{"title":"技術細節","description":"","frontmatter":{},"headers":[],"relativePath":"moran-docs/07.其他模式/01.魔然辅筛方案/技术细节.md","filePath":"moran-docs/07.其他模式/01.魔然辅筛方案/技术细节.md"}'),l={name:"moran-docs/07.其他模式/01.魔然辅筛方案/技术细节.md"};function n(c,a,i,d,s,u){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="技術細節" tabindex="-1">技術細節 <a class="header-anchor" href="#技術細節" aria-label="Permalink to &quot;技術細節&quot;">​</a></h1><h2 id="lua-實現" tabindex="-1">Lua 實現 <a class="header-anchor" href="#lua-實現" aria-label="Permalink to &quot;Lua 實現&quot;">​</a></h2><p><code>lua/moran_aux_translator.lua</code></p><ul><li>「消去輔助碼」邏輯使用 OnSelect hook 實現。當用戶選擇到一個由輔助碼提升上來的候選時，OnSelect hook 就刪除輸入末尾的 n 個字符。</li><li>實現作 translator 而非 filter 是因爲需要多次請求 <code>script_translator</code>，這在 Lua filter 中是做不到的。</li></ul><p>間接輔助碼已有 <a href="https://github.com/HowcanoeWang/rime-lua-aux-code" target="_blank" rel="noreferrer">HowcanoeWang/rime-lua-aux-code</a> （Lua filter）可使用。輔篩的 Lua translator 可視作對應的直接輔助碼版本。</p><h2 id="輔助碼來源" tabindex="-1">輔助碼來源 <a class="header-anchor" href="#輔助碼來源" aria-label="Permalink to &quot;輔助碼來源&quot;">​</a></h2><p>輔篩模式使用的輔助碼定義來自於 <code>lua/zrmdb.txt</code> 而不使用固態詞典中的定義。主要是爲了做得更通用一些，可以直接掛到其他雙拼方案裏使用。</p><h2 id="編碼生成與詞庫" tabindex="-1">編碼生成與詞庫 <a class="header-anchor" href="#編碼生成與詞庫" aria-label="Permalink to &quot;編碼生成與詞庫&quot;">​</a></h2><p>「魔然·輔篩」與「魔然」和「魔然·整句」共享詞庫。輔篩模式使用特殊拼寫運算將詞庫編碼轉換成純雙拼編碼，禁止了輔助碼混輸/干擾。</p>',9)]))}const p=e(l,[["render",n]]);export{m as __pageData,p as default};
