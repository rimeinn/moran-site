import{_ as d,c as e,a2 as o,o as r}from"./chunks/framework.CJ3Fe3Yg.js";const m=JSON.parse('{"title":"拼寫運算","description":"","frontmatter":{},"headers":[],"relativePath":"moran-docs/02.安装与维护/配置/技术细节/拼写运算.md","filePath":"moran-docs/02.安装与维护/配置/技术细节/拼写运算.md"}'),c={name:"moran-docs/02.安装与维护/配置/技术细节/拼写运算.md"};function a(_,t,s,l,i,n){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="拼寫運算" tabindex="-1">拼寫運算 <a class="header-anchor" href="#拼寫運算" aria-label="Permalink to &quot;拼寫運算&quot;">​</a></h1><p>魔然的拼寫運算框架把拼寫運算劃分成了 5 個階段：</p><ol><li><code>user_force_top</code></li><li><code>user_force_bottom</code></li><li><code>generate_code</code></li><li><code>user_sentence_bottom</code></li><li><code>user_force_bottom</code></li></ol><p>該框架主要是爲了減少重複代碼。例如，要在手機上實現 19 鍵佈局，則鍵位映射應該注入到所有方案中，而飛鍵映射只能用在類整句方案中。</p><p>五個階段依次從上到下運行。不同方案使用其中不同的設置：</p><table tabindex="0"><thead><tr><th>方案</th><th>user_force_top</th><th>user_force_bottom</th><th>generate_code</th><th>user_sentence_bottom</th><th>user_force_bottom</th></tr></thead><tbody><tr><td>魔然</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>整句</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>字詞</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>輔篩</td><td>✅</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td></tr></tbody></table><ul><li>只有 <code>user_force_top</code> 和 <code>user_force_bottom</code> 會注入到所有方案中。</li><li>輔篩模式使用特殊的編碼生成邏輯。</li></ul>',7)]))}const p=d(c,[["render",a]]);export{m as __pageData,p as default};
