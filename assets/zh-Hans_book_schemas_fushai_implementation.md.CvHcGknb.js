import{_ as e,c as t,a4 as o,o as r}from"./chunks/framework.NOSrbWr_.js";const m=JSON.parse('{"title":"技术细节","description":"","frontmatter":{"title":"技术细节","order":4},"headers":[],"relativePath":"zh-Hans/book/schemas/fushai/implementation.md","filePath":"zh-Hans/book/schemas/fushai/implementation.md"}'),l={name:"zh-Hans/book/schemas/fushai/implementation.md"};function i(n,a,s,c,h,u){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="技术细节" tabindex="-1">技术细节 <a class="header-anchor" href="#技术细节" aria-label="Permalink to &quot;技术细节&quot;">​</a></h1><h2 id="lua-实现" tabindex="-1">Lua 实现 <a class="header-anchor" href="#lua-实现" aria-label="Permalink to &quot;Lua 实现&quot;">​</a></h2><p><code>lua/moran_aux_translator.lua</code></p><ul><li>「消去辅助码」逻辑使用 OnSelect hook 实现。当用户选择到一个由辅助码提升上来的候选时，OnSelect hook 就删除输入末尾的 n 个字符。</li><li>实现作 translator 而非 filter 是因为需要多次请求 <code>script_translator</code>，这在 Lua filter 中是做不到的。</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>间接辅助码已有 <a href="https://github.com/HowcanoeWang/rime-lua-aux-code" target="_blank" rel="noreferrer">HowcanoeWang/rime-lua-aux-code</a> （Lua filter）可使用。辅筛的 Lua translator 可视作对应的直接辅助码版本。</p></div><h2 id="辅助码来源" tabindex="-1">辅助码来源 <a class="header-anchor" href="#辅助码来源" aria-label="Permalink to &quot;辅助码来源&quot;">​</a></h2><p>辅筛模式使用的辅助码定义来自于 <code>lua/zrmdb.txt</code> 而不使用固态词典中的定义。主要是为了做得更通用一些，可以直接挂到其他双拼方案里使用。</p><h2 id="编码生成与词库" tabindex="-1">编码生成与词库 <a class="header-anchor" href="#编码生成与词库" aria-label="Permalink to &quot;编码生成与词库&quot;">​</a></h2><p>「魔然·辅筛」与「魔然」和「魔然·整句」共享词库。辅筛模式使用特殊拼写运算将词库编码转换成纯双拼编码，禁止了辅助码混输/干扰。</p>',9)]))}const p=e(l,[["render",i]]);export{m as __pageData,p as default};
